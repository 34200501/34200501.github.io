{"meta":{"title":"枫","subtitle":"","description":"","author":"枫隐竹月","url":"http://example.com","root":"/"},"pages":[{"title":"文章归档","date":"2024-03-02T02:31:24.280Z","updated":"2024-03-01T21:35:19.023Z","comments":true,"path":"archive.html","permalink":"http://example.com/archive.html","excerpt":"","text":""},{"title":"","date":"2024-02-29T23:48:58.613Z","updated":"2024-02-29T23:48:55.900Z","comments":true,"path":"me.html","permalink":"http://example.com/me.html","excerpt":"","text":""},{"title":"链接","date":"2024-03-01T00:00:00.000Z","updated":"2024-03-01T21:36:14.626Z","comments":true,"path":"PY.html","permalink":"http://example.com/PY.html","excerpt":"","text":""}],"posts":[{"title":"部署流程","slug":"部署流程","date":"2024-03-01T00:00:00.000Z","updated":"2024-03-02T02:56:37.741Z","comments":true,"path":"2024/03/01/部署流程/","permalink":"http://example.com/2024/03/01/%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/","excerpt":"网站部署流程","text":"网站部署流程 0 - 必要环境0.1 - 环境安装 Node.js for Windows 下载 Node.js官网链接选择LTS版本进行下载（xx.xx.xx LTS）执行安装时，勾选Add to PATH选项。 Git Bash for Windows 下载 Git Bash官网链接Git Bash下载页面镜像站下载页面 Hexo for Windows 下载 Hexo官网链接Hexo使用文档创建文件夹，用于存放Hexo博客；使用命令行在该文件夹目录下安装Hexo：npm install -g hexo-cli 或在Github中的hexo-script下载最新的install.sh文件执行一键安装（不推荐） 以下步骤有待考究 1234cd themes # 载入主题目录git clone https://github.com/nexmoe/hexo-theme-nexmoe.git nexmoe # 安装cd nexmoe # 进入 Nexmoe 主题目录npm i --save hexo-wordcount 0.2 - 环境配置 Git Bash 配置 配置Git邮箱为&#x33;&#52;&#50;&#48;&#48;&#x35;&#x30;&#x31;&#64;&#113;&#113;&#x2e;&#99;&#111;&#109;git config --global user.email &quot;34200501@qq.com&quot; 配置Git用户名为34200501git config --global user.name &quot;34200501&quot; Hexo 配置1 初始化一个名为”blog”的博客项目 npx hexo init blog 2 命令行进入blog文件夹路径 cd blog 3 安装npm依赖到blog\\node_modules目录 npm install 4 尝试连接（默认以4000端口创建） hexo s 在代码后加入空格-p 8888即以8888端口创建， 在代码后加入空格--debug即以debug模式创建， 综上代码可以是hexo s -p 8888 --debug 使用8888端口创建好后在浏览器中输入以下任意网址完成访问 http://localhost:8888/ http://127.0.0.1:8888/ http:&#x2F;&#x2F;所在局域网ip:8888&#x2F; http:&#x2F;&#x2F;独立公网ip:8888&#x2F; 1 - 部署1.1 - 安装主题配置主题打开 blog_config.yml 配置文件，找到并修改 1theme: nexmoe 在blog目录使用Git Bash获取Nexmoe主题 npm i hexo-theme-nexmoe npm install hexo-theme-nexmoe hexo-renderer-inferno 安装WordCount主题默认开启字数统计，必须安装插件 npm i --save hexo-wordcount 完善栏目添加文章归档、友情链接等页面 1234567891011121314151617.├── .deploy # 需要部署的文件├── node_modules # 项目所有的依赖包和插件├── public # 生成的静态网页文件├── scaffolds # 文章模板├── source # 博客正文和其他源文件等都应该放在这里| ├── _drafts # 草稿| ├── _posts # 文章| ├── images # 图片| ├── about.md # 关于我| ├── archive.md #文章归档| └── friends.md # 友情链接├── themes # 主题├── _config.yml # 全局配置文件├── _config.nexmoe.yml # nexmoe配置文件└── package.json # 项目依赖信息 建立文章归档页面在source文件夹下新建archive.md，并在文件头添加以下内容： 1234---title: 文章归档layout: archive--- 建立友情链接页面在source文件夹下新建py.md，并在文件头添加以下内容： 123456---title: linksdate: 2013/7/13 20:46:25layout: pypermalink: PY.html--- 友链格式： 1- [![标题](https://example.com/logo.png)](https://example.com/ &quot;标题&quot;) 建立关于博主页面在source文件夹下新建me.md，主题config文件中配置about页面的名字，此处为me 添加图片文件夹hexo的全局assets是source&#x2F;images，例如 1![ImageName](/images/2024/example.png) 安装本地搜索功能Nexmoe主题可以使用Bing和本地搜索，经测试后Bing大概率无法使用。因此选择使用本地搜索。 npm i -S hexo-generator-json-content 打开blog_config.nexmoe.yml里将enable改为true，type改为loca，如下： 123456widgets: - name: search enable: true options: search: type: local 1.2 - 外网访问建立好后如果宽带没有独立公网IP，则只支持局域网内访问，非局域网需要通过特殊途径访问。 1.2.1 - 使用开源仓库把建立好的网站上传到开源仓库服务器中，本篇仅使用Github和Gitee。 注意：使用Gitee需要上传身份证件进行实名认证。 1.2.1.1 - 配置SSH Key检查SSH密钥打开命令行&#x2F;Powershell&#x2F;GitBash执行代码检查本机是否存在ssh密钥 cd ~/. ssh 如果提示No such file or directory代表本机不存在ssh密钥，执行第二步，若存在则跳过第二步。 创建SSH密钥执行下面的代码建立名为rsa的密钥，rsa可以是任何名字，邮箱地址改为自己的邮箱地址。 ssh-keygen -t rsa -C &quot;34200501@qq.com&quot; 执行后会显示如下代码 12Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter] 直接回车会将密钥按默认文件进行存储。也可以输入特定的文件名后回车，如/c/Users/用户名/.ssh/github_rsa接着根据提示输入密码和确认密码，直接回车则为空密码，以下是显示的代码： 12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 看到下面这串信息后代表SSH密钥创建完成： 1234Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx 34200501@qq.com 最后一行代码中，xx为十六进制的任意字符，邮箱为自己的邮箱地址。 此时，在/c/Users/用户名/.ssh文件夹中建立了2个文件：id_rsa：私钥 - 不要泄露id_rsa.pub：公钥 - 平时用的 绑定SSH密钥到仓库打开.ssh\\id_rsa.pub文件，复制里面的内容。 或直接在命令行中输入代码复制clip &lt; ~/.ssh/id_rsa.pub 使用Github仓库 复制密钥后登录Github官网，右上方点击头像，在弹出的选项中点击Settings进入用户信息页面。在用户信息页面点击SSH and GPG keys进入密钥页面。 在密钥页面中SSH keys区域点击New SSH key按钮进入建立新的SSH key页面，Title标题随意填写，在Key文本框中粘贴刚才复制的SSH代码。 点击Add SSH key按钮即绑定成功。 使用Gitee仓库 复制密钥后登录Gitee官网，右上方点击头像，在弹出的选项中点击设置进入用户信息页面。在用户信息页面点击SSH公钥进入SSH公钥页面。 在密钥页面中的添加公钥区域，标题随意填写，在公钥文本框中粘贴刚才复制的SSH代码。 点击 确定 按钮即绑定成功。 测试SSH连通 使用Github仓库 在命令行中输入代码测试是否连通ssh -T git@github.com 如果提示以下代码即连通成功 1Are you sure you want to continue connecting (yes/no)? 此时输入yes后回车，便完成配置，并提示： 1Hi zhoujinjian! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 如果提示的是展开的这串信息则代表22端口无法使用，则需要进一步配置 1ssh: connect to host github.com port 22: Connection timed out 此时执行这段代码，以https的端口(443)使用SSH：ssh -T -p 443 git@ssh.github.com如果成功，则在/c/Users/用户名/.ssh文件夹中打开config文件，打开后在文件头添加以下内容：（如果没有该文件，则自行建立一个文件后重命名为config，注意没有后缀名） 1234Host github.comHostname ssh.github.comPort 443User git 使用Gitee仓库 在命令行中输入代码测试是否连通ssh -T git@gitee.com 如果提示以下代码即连通成功 1Are you sure you want to continue connecting (yes/no)? 此时输入yes后回车，便完成配置，并提示： 1Hi zhoujinjian! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 如果提示的是展开的这串信息则代表22端口无法使用，则需要进一步配置 1ssh: connect to host github.com port 22: Connection timed out 此时执行这段代码，以https的端口(443)使用SSH：ssh -T -p 443 git@ssh.github.com如果成功，则在/c/Users/用户名/.ssh文件夹中打开config文件，打开后在文件头添加以下内容：（如果没有该文件，则自行建立一个文件后重命名为config，注意没有后缀名） 1234Host gitee.comHostname ssh.gitee.comPort 443User git 连通成功后，如果在0.2 - 环境配置中的Git配置环节输入的用户名和邮箱与Github&#x2F;Gitee中的用户名和邮箱不一致，则执行以下代码： 12git config --global user.name &quot;34200501&quot;git config --global user.email &quot;34200501@qq.com&quot; 其中：34200501更改为Github&#x2F;Gitee用户名，非昵称；34200501@qq.com更改为Github&#x2F;Gitee注册邮箱。 1.2.1.2 - 使用仓库域名 使用Github仓库 登录Github官网，在右上方点击加号，在下拉框中点击 New repository。在新建仓库页面中Repository name 文本框中输入 Owner.github.io，其中Owner修改为自己Owner的内容，如34200501.github.io。输入完成后可以直接点击Create repository完成Gihub仓库建立。 使用Gitee仓库 登录Gitee官网，在右上方点击加号，在下拉框中点击新建仓库。在新建仓库页面中 路径 文本框中输入 自己归属的内容，如FengYZY，注意与Github不同；仓库名称随意填写。输入完成后可以点击创建完成Gitee仓库建立。 完成建立后自动跳转到项目页面的代码板块，在快速设置—如果你知道该怎么操作，直接使用下面的地址中复制右边文本框的HTTPS地址进行下一步操作。 1.2.1.3 - 配置Hexo的git部署在blog根目录下安装git部署插件 npm install hexo-deployer-git --save 修改项目配置文件（blog_config.yml），在文件最下方的deploy块添加&#x2F;修改内容 使用Github仓库 注意：自行修改repo:后的地址。 1234deploy: type: git repo: https://github.com/34200501/34200501.github.io.git branch: master 使用Gitee仓库 注意：自行修改repo后的地址。 1234deploy: type: git repo: https://gitee.com/FengYZY/FengYZY.git branch: master 配置好后输入以下代码将项目部署到远程仓库，此时本地会生成一个public文件夹。 hexo d 1.2.1.4 - 访问托管的网站 使用Github仓库 直接访问上述网站，如34200501.github.io 使用Gitee仓库 进入项目库，在项目页面上方点击服务，在下拉框中选择Gitee page。完成配置后即可访问上述网站，如FengYZY.gitee.io 1.3 - 自定义配置 Nexomoe主题配置文件为 blog_config.nexmoe.yml 修改icon (教程原文未能解读)普通小icon来源iconfont，没有找到预览方式。不过可以进去文件夹找到svg后猜测 12node_modules\\hexo-theme-nexmoe\\source\\lib\\iconfont\\iconfont.svg#或者直接看css 更快 例如： 1&lt;glyph glyph-name=&quot;douban-fill&quot; ... .../&gt; 就可以猜测是icon-douban-fill。 启用文章目录修改blog_config.nexmoe.yml文件的globalToc为true 12function: # 功能开关，可选值（true,false） globalToc: true # 开启该功能会自动开启文章 TOC（文章目录） 功能 启用部分文章加密项目地址：Hexo-blog-encrypt blog目录下运行 npm install --save hexo-blog-encrypt 在文章中加入password 12345---title: Hello Worlddate: 2016-03-30 21:18:02password: hello--- 评论功能将node_modules文件夹内的hexo-theme-nexmoe复制到项目文件夹\\themes下。 将themes\\nexmoe\\layout_comment\\waline.ejs以及_config.nexmoe.yml文件修改。可参考valine的设置。 本地运行Hexo命令及主题升级本地运行hexo打开Hexo基础命令查看。 常用命令 123456789101112131415161718192021222324252627282930313233343536hexo s|hexo server## 启动服务，默认地址为http://localhost:4000/，4000端口hexo d|hexo deploy## 部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至仓库hexo g|hexo generate## 在hexo站点根目录下生成public文件夹hexo clean## 把hexo g产生的public文件夹删除hexo new [layout] &lt;title&gt;## 例：hexo new photo &quot;my-first-blog&quot;## 上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。-- 删除文章## 在本地把source/_posts文件夹下的文章源文件删除后，执行以下命令重新部署即常规删除hexo clean &amp;&amp; hexo g &amp;&amp; hexo s-- 备份/迁移Hexo## 1.备份blog根目录## 2.重新安装hexo## 3.使用备份的目录覆盖新生成的文件## 4.运行如下代码hexo clean &amp;&amp; hexo g &amp;&amp; hexo s## 下面部分为进阶配置## 5.生成新SSH公钥git config --global user.name &quot;34200501&quot;git config --global user.email &quot;34200501@qq.com&quot;ssh-keygen -t rsa -C &quot;34200501@qq.com&quot;## rsa为公钥名称## 公钥路径：C:\\Users\\Administrator\\.ssh\\id_rsa.pub## 将公钥复制到仓库，新建SSH Key后执行如下代码hexo d 1.4 - 生成文章1文章中引用图片格式为![avatar](xxx.jpg)，图片放在资源文件夹下，资源文件夹为md文件同级的同名文件夹，需要在hexo配置中启用assets选项 1234567给文章添加图头，格式为：---cover: /img/xxx.xxxcoverWidth: 1200coverHeight: 750---图片放置在主题文件夹下的source目录下的img内，图片大小格式与图片一致 主题bug：tagCloud高亮没有显示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104解决办法:直接把css加在index文件里面： 在 nexmoe\\layout\\_widget\\tagcloud.ejs里面，和div标签平行加上内容，最终修改结果如：&lt;% if (site.tags.length)&#123; %&gt; &lt;div class=&quot;nexmoe-widget-wrap&quot;&gt; &lt;h3 class=&quot;nexmoe-widget-title&quot;&gt;&lt;%= __(&#x27;tagcloud&#x27;) %&gt;&lt;/h3&gt; &lt;div id=&quot;randomtagcloud&quot; class=&quot;nexmoe-widget tagcloud&quot;&gt; &lt;%- tagcloud() %&gt; &lt;/div&gt; &lt;% if (theme.maxTagcloud)&#123; %&gt; &lt;script&gt; var maxTagcloud = parseInt(&lt;%= theme.maxTagcloud %&gt;); var tags_length = parseInt(&lt;%= site.tags.length %&gt;); var tags_arr = []; for(var i = 0; i &lt; tags_length; i++)&#123; tags_arr.push(i); &#125; tags_arr.sort(function (l, r) &#123; return Math.random() &gt; 0.5 ? -1 : 1; &#125;); tags_arr = tags_arr.slice(0, maxTagcloud &lt; tags_length ? tags_length - maxTagcloud : 0); for(var tag_i = 0; tag_i &lt; tags_arr.length; tag_i++)&#123; document.getElementById(&quot;randomtagcloud&quot;).children[tags_arr[tag_i]].style.display = &#x27;none&#x27;; &#125; &lt;/script&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;style&gt; #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+1) &#123; background-color: rgba(255,78,106,0.15); color: rgba(255,78,106,0.8); &#125; #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+2) &#123; background-color: rgba(255,170,115,0.15); color: #ffaa73; &#125; #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+3) &#123; background-color: rgba(254,212,102,0.15); color: #fed466; &#125; #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+4) &#123; background-color: rgba(60,220,130,0.15); color: #3cdc82; &#125; #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+5) &#123; background-color: rgba(100,220,240,0.15); color: #64dcf0; &#125; #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+6) &#123; background-color: rgba(100,185,255,0.15); color: #64b9ff; &#125; #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+7) &#123; background-color: rgba(180,180,255,0.15); color: #b4b4ff; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta &#123; margin: 25px 0px; font-size: 0; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a &#123; border-radius: 20px; padding: 10px 18px; color: #fff; font-size: 14px; display: inline-block; margin-bottom: 5px; margin-right: 10px; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a .nexmoefont &#123; font-size: 14px; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a:before, #nexmoe-content .nexmoe-post .nexmoe-post-meta i:before &#123; margin-right: 5px; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+1) &#123; background-color: rgba(255,78,106,0.15); color: #ff4e6a; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+2) &#123; background-color: rgba(255,170,115,0.15); color: #ffaa73; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+3) &#123; background-color: rgba(254,212,102,0.15); color: #fed466; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+4) &#123; background-color: rgba(60,220,130,0.15); color: #3cdc82; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+5) &#123; background-color: rgba(100,220,240,0.15); color: #64dcf0; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+6) &#123; background-color: rgba(100,185,255,0.15); color: #64b9ff; &#125; #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+7) &#123; background-color: rgba(180,180,255,0.15); color: #b4b4ff; &#125; &lt;/style&gt;&lt;% &#125; %&gt; 参考及引用内容Hexo Theme Nexmoe 官网 Hexo Theme Nexmoe 项目仓库 Hexo-Nexmon主题安装和配置流程_nexmoe 文章目录-CSDN博客 Hexo搭建博客 - nexmoe主题-腾讯云开发者社区-腾讯云 Hexo+gitee：30分钟搭建一个自己的个人博客网站 欢迎友链呀＜(▰˘◡˘▰)_hexo 个人博客网址-CSDN博客","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-02-29T22:46:55.952Z","updated":"2024-02-29T22:46:55.953Z","comments":true,"path":"2024/03/01/hello-world/","permalink":"http://example.com/2024/03/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}